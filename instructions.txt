-------------Javascript and ES6 From Beginer To Advanced----------

1. Introduction 
    Javascript is the most demanded programming language for the web. It improves the user experience of web pages by converting it from a static page into interactive one.
    Javascript adds behaviour to web pages.

2. Ways to write
    Internal => before body tag start script tag and write js in it for example
    <script>
        console.log('hello world')
    </script>

    External => create separate file for example index.js and add a script tag link before body end tag 
                <script src="index.js"></script>

3. JavaScript Comments
    //I am single line comment in javascript 

    /*
    i am multiline comments
    in 
    javascript
    */

4. Printing In Console
    console.log('Hello Welcome in Javascript course')

5. Values And Variables in Javascript
    There are 3 ways to declare a JavaScript variable:
    var
    let                                                 // It Coments in ES6 Part
    const                                               // It comes In ES6 Part

    syntax :
    var variable_name = value;
    var name = "my name is tanu";
    let name = "tanu";
    const name = "tanu"

    difference between var , let and const ----
        var can Redeclared. it overwrites previous value with new value
        let and const cannot be Redeclared. 
        for example
            var myAge = 18;
            var myAge = 25;
            console.log(myAge);   // it gives output 25 bcoz it overwrite var variable with new one.
            let myAge2 = 12;
            let myAge2 = 20;
            console.log(myAge2);  //it gives an error bcoz myAge2 already been declared.

            let and const variable provide Block Scope in JavaScript.
            Variables declared inside a { } block cannot be accessed from outside the block:

            for Example=>
                function checkVariables() {
                    let checkMe = "I am Outside";
                    {
                    let checkMe = "I am Inside"
                    console.log(checkMe); 
                    }
                    console.log(checkMe);
                }
                checkVariables();     //output is I am Inside  I am Outside

            Variables declared with the var keyword can NOT have block scope it Has Function Scope.
            Variables declared inside a { } block can be accessed from outside the block.

            for Example=>
                function checkVariables() {
                    var checkMe = "I am Outside";
                    {
                    var checkMe = "I am Inside"
                    console.log(checkMe); 
                    }
                    console.log(checkMe);
                }
                checkVariables();   //output is I am Inside  I am inside

            const is a constant variable so we can declare const variable only once we cannot change value later. 
            for example
            const PI = 3.147;
            PI = 5; // gives error bcoz we cannot change const variable value.

    some common rules for declaring Variables are:
        1: Naming Conventions must be in camelCase. 
            example=> var userName = "nk sharma";

        2: Names are case sensitive 
            example Name name both are different varialbles.
        
        3. Cannot use Reserved words which already taken by javascript
            example var var = "cannot use var as variable name bcoz is javascript reserved keyword "

        4. Names must begin with a letter, underscore, dollar sign, 

        5.Names cannot not begin with number

        You can declare many variables in one statement.
        Start the statement with var and separate the variables by comma:
            example= var name="RK", surname="sharma", age="20";

6. Data Types in Javascrpit
    Six Data Types that Are primitives
    
    1. Undefined
        Undefined data types means declare a variable but no value. we can put value letter when we need.
        var x;
    2. String
        var name = "my name is ---";
    3. Number
        var age = 20;
    4. Booleans
        var is_available = true;    var is_available = false;
    5. NULL
        var nullvariable = null;
    6. Bigint  //Important Note: We will discuss about bigint in ES6 part on line no: 
    7. Symbol // Important Note: We will discuss about symbol later in ES6 part on line no: 
    8. nan
        nan or not a number is a property of global object in other words it is a varialbe in global scope. The initial Value of Nan is not a number. 

    for check data type of a varialbe use typeOf(varialbeName);
    Note : object and arrays are also called data types
    Important Note: We will discuss about array and objects later in array and object portion on line no: 

7. Expressions And operator
    10 + 5 = > This is Called An Expression
    + is called Operator 
    10 and 5 is called Opearands

    Types Of Operators: 

    1: Assignment Operator
        assign opearor used to assign value assignment operator is = 
        for example a = 20; //in this = assign value so = is called assignment operator

    2: Arithmetic Operator
        arithmetic operator means mathematical operations for example +, -, *, / etc
        5 + 5;      // Addition Operator ( + )
        5 - 5;      // Substraction Operator ( - )
        5 * 5;      // multiplication Operator ( * )
        5 / 5;      // Divison Operator ( / )
        5 % 4;      // Module Operator ( % )
        5 ** 5      // Exponential Operator or power ( ** )   //It comes in ES6
        a = ++a     // prefix increament
        a = a++     //postfix increament
        a = --a     // prefix decreament
        a = a--     //postfix decreament

    3: Comparision Operator
        5 == "5"      //Equal to operator check only values ( == )
        5 === 5       //triple Equal to operator check values with data types ( === )
        5 != 4        //Not Equal to Operator ( != )
        10 > 5        //Greater THan operator ( > )
        10 < 5        //Less THan operator ( < )
        10 >= 5        //Greater THan or equal to operator ( >= )
        10 <= 5        //Less THan or equal to operator ( =< )

    4. Logical Operator
        if(a>b && b<c)  //and operator ( && ) if both values true
        if(a>b || b<c)  //or operator ( || ) if one values true then it return true
        if(!a=b)        // logical not ( ! )

    5. String Operator
        "Hello," + "I am TAnu";               //for concation two string use concat operator ( + )

        Template Literals                       //It comes in ES6 part
            template literal is used to use both variable with string for Example
            var name = "tanu";
            syntax : `  writter inside back quote and variable in hash with curly braces #{ variableNameHere } `;
            console.log(` My Name is ${name} `);

    6. Conditional (Ternary) Operator
        ternary operator means one liner if else 
        condition ? true : false ;
        5 == 5 ? true : false ;

8. Control Statements And Loops
    if else
        if( true ){
            console.log('this is true block');
        }else{
            console.log('this is false block')
        }
    
    if elseif else
        if( a > b ){
            console.log('a is greater');
        }else if(a < b ){
            console.log('b is greater')
        }else{
            console.log('else block')
        }

    note : fasly values in js => 0, ' ', undefined, null, nan falsy values always show else block. 
    if (0){
        console.log('i am not executed in falsy value');
    }else{
        console.log('i am always executed with falsy value');
    }

    //Switch Case Statement
        var a = 1;
        switch(condition){
            case 1:console.log('one');
            break;
            case 2:console.log('two');
            break;
            case 3:console.log('three');
            break;
            default: console.log('another number');
        }
    
    //While loop
        var num = 0;
        while(num < 10){
            console.log(num)
            num ++;
        }

    //do while loop
        var num = 0;
        do {
            console.log(num)
            num ++;
        }
        while(num < 10)

    difference b/w do while and while loop is that do while always run one time then check condition but while loop first check condition then executes code.

    //For loop
        for( i = 0; i < 10; i++){
            console.log(i)
        }

    //conditional (ternary)
    ((5 == 5) ? '5 is equal to 5': '5 is not equal to 5');

    //For in loop
        var dataArray = ["mohan","sohan","ravi"]
        for (let elements in dataArray){
            console.log(elements);          //for in loop return index number of array
        }

    //For of Loop
        var dataArray = ["mohan","sohan","ravi"]
        for (let elements of dataArray){
            console.log(elements);          //for of loop return elements values of an array
        }
    //Foreach loop
        var dataArray = ["mohan","sohan","ravi"]
        dataArray.foreach(function(element, index, array, this){
            console.log('my name is'+element+ 'and i am on index num'+index + 'belong to this array'+array);
        });

9. Debugger in Javascript
    debugger is used to debugging code in console. use debugger in block function to check how its works.
    debugger;
    for example
        for (let i = 0; i <= 10 ; i++) {
            debugger;
            console.log(i);
        }

10. Functions In Javascript

    1. Function define 
        function myFunction(){
            console.log('hy')
        }
    2. Function Calling 
        myFunction();

    3. Function Parameters 
        function myFunction(name, age){
            console.log('my name is' + name + ' my age is ' + age)
        }
    4. Function Arguements 
         myFunction('Ak', 20);

    5. Function Expressions
        var functionExpression = myFunction();

    6. Return Keyword
        function myFunction(name, age){
           let msg = 'my name is ' + name + ' my age is ' + age ;
           return msg;
        }
        var functionExpression = myFunction();
        console.log(functionExpression);

    7. Anonymous Functions 
        var AnonymousFunction = function(){
            return 5 + 5;
        }
        var AnFunc = AnonymousFunction();
        console.log(AnFunc)

    8. Arror Functions or Fat Arrow Functions   // It Coments in ES6 Part
        let myArrowFunction = () => {
            console.log('I am syntax of arrow function')
        }
        myArrowFunction();

        //if only return single line statment then no need to use return keyword for example 
        let myName = () => 'hello world';
        console.log(myName());

    9. Default Arguements In Function               //It comes in ES6 part 
        function defaultArugumentFunction (a , b = 5){
            console.log(a + b)
        }
        defaultArugumentFunction( 4 );

11. Arrays In Javascript
    var myArray = ["apple", "ball", "cat", 10];
    rules: array always start counting from 0 index number.
        2. first element of array is called lower index or lower boundaries and last element of array is called upper index or upper boundaries.
        
    Some main topics we will study in array are-----
    1. Traversal of an array 
    2. Searching and filter in Array 
    3. How to sort and compare and array 
    4. How to insert /add /replace/ delete in array (CRUD)
    5. Map(), reduce(), Filter() method in brief.
    6. Array Destructing                        //It comes in ES6 Part
    7. Spread Operators                         //It comes in ES6 Part

    Ways to declare Array are- 
        var fruits = new Array;    //optional not compulsory to write this
        var fruits = ['mango', 'apple', 'orange'];

    for check length of an array : use 
        console.log(arrayName.length);

    1: Traversal Of An Array
        arrayName[index];
        arrayName[0];  //for knowing 1st element of an array
        arrayName[arrayName.length - 1];  //for knowing last element of an array

        for fetch all data in an array using for loops------

            arrayName.forEach(function(element, index ,arr){
                console.log(element)                // best way to fetch an array is foreach loop
            })

            arrayName.forEach((element, index ,arr) => {
                console.log(element)        //return element value , element index number , belongs to array
            })

            for( i = 0; i < arrayName.length; i++){
                    const element = arrayName[i];       //return only element value
            }

            for (elementId in arrayName){
                console.log(elementId)   //return only index nmuber
            }

             for (element of arrayName){
                console.log(element)   //return only element value
            }

    2: Searching And Filtering Of An Array
        var student = ["rahul","rohit","abhav","ankit","afrin","abhav"];

        indexOf method syntax--
            indexOf('what to find', from where start finding);

        console.log(student.indexOf());  //if not match with anything it return -1 
        console.log(student.indexOf('abhav'));   //if gives index number //2 
        console.log(student.indexOf('abhav', 3)); //if start finding from 3 index number and return 5

        lastIndexOf method syntax--
            lastIndexOf('what to find', start finding from last element);

        console.log(student.lastIndexOf("abhav"));   //start finding from last element return 5 
        console.log(student.lastIndexOf("abhav", 2));  //return 3
        if not find anything return -1 
        
        //Includes method                        //It comes in ES6 Part
            if check is present or not return true or false
        console.log(student.includes('rahul'));
        console.log(student.includes('rahul',3));

        //Find Method and findIndex method 

        //find method return only one matching element if not find anuthing then ot return undefined
            let myArray = [1,2,3,4,5,6,7,8,9,10]
            console.log(myArray.find((element)=>{
                return element < 5;
            }));

        //findIndex method return only one matching element id if not find anuthing then ot return -1
            let myArray = [1,2,3,4,5,6,7,8,9,10]
            console.log(myArray.find((elementId)=>{
                return elementId < 5;
            }));

        //Filter Method 
            //Filter Method Returns all matching element in an new array if not find any matching results then it returns empty array
             
                let numGreaterThanFiveFilterData = myArray.filter((element, index, arr)=>{
                   return element > 5;
                });
                console.log(numGreaterThanFiveFilterData);
            
    3. How to sort and compare and array 
        //converting in string and compare return in ascending order.
        myArray.sort(); 
        for example => let num = [1,2,3,40,20];
        it gives output console.log(num.sort()); // [1,2,20,3,40]

    4. How to insert /add /replace/ delete in array (CRUD)

        Add Data in last 
            let myArray = ['apple','banana',]
            myArray.push('mango');
            myArray.push('orange', 'guava');        //also add multiples values
        Add Data in Start 
            myArray.unshift('lichi');

        Remove last element of array
            myArray.pop();
        remove first element of array
            myArray.shift();
        
        Splice Metohd 
            myArray.splice(add index, delete index, add element);
            for example myArray.splice(3, 0, 'grapes');  //it add grapes on index 3
            myArray.splice(myArray.length , 0, 'grapes');       /it adds an element in last 
            myArray.splice(1, 1,'papapya')  //it replace 1 index from papaya
            myArray.splice(2, 2); //remove 2 elements from 2 index

        Slice method 
            slice method returns selected elements in an array, as a new array. does not change the original array. 
            syntax 
            myArray.slice(starting index, ending index);
            myArray.slice(1,3);
            myArray.slice(2, Infinity)

    5. Map(), reduce(), Filter() method in brief.

        Map Method
        map method is used to fetch all data of an array it is similar as foreach but the major difference between foreach and map method is that- 
        map : it returns new array without mutating the original array . 
                map method also use chaining other methods . 
        forEach : it mutating the original array 

        example of map method 
            array.map((element , index, array)=>{
                return element;
            });

        Filter Method is used to filter data 
            array.filter((element , index, array)=>{
                return element.category == "horror";
            });

        reduce Method 
            The reduce Method executes a reducer function (that you provide) on each element of the array resulting in single output value. the reduces function takes 4 Arguements . 
            accumulator , current Value , Index , array 

            array.reduce((accumulator, currentValue, index, array)=>{
                return accumulator += currentValue;
            });

            //also pas initial value
                let sumofAllNum = array.reduce((accumulator, currentValue, index, array)=>{
                    return accumulator += currentValue;
                },10);
                console.log(sumofAllNum);

            reduce Method is used to Flattern an array means to convert the 2d , 3d array in to a single dimensional array. 
            example => 
                let arr = [
                    ['one','two'],
                    ['three','four'],
                    ['five','six']
                ];
                flatArray = arr.reduce((accumulator, currentValue)=>{
                    return accumulator.concat(currentValue);
                });
                console.log(flatArray);

        Map Method chaining System example 
        let allNumbers = [1,2,3,4,5,6,7,8,9,10,20,30,40,50];
        let methodChaining = allNumbers.map((elem)=>elem * 2).filter((element)=>element > 50).reduce(       (accumulator, currElem)=>accumulator += currElem);
        console.log(methodChaining);

        in the above example first we multiply all element by 2 then we find only those element which iss greater than 50 then we add all filter data using reduce method .

    6. Array Destructing
        it comes in es6 part to destruct an array 
        syntax: let myArray = ['mango','apple','orange'];
                let [fruit1, fruit2, fruit3] = myArray;
                console.log(`${fruit1} ${fruit2} ${fruit2}`);
        
    7. Spread Operator 
        JavaScript ES6 (ECMAScript 6) introduced the spread operator. The syntax is three dots(...) followed by the array (or iterable*). It expands the array into individual elements. So, it can be used to expand the array in a places where zero or more elements are expected.
        for example 
            let num = [1,2,3,4,5];
            let moreNum = [...num, 6,7,8,9,10]

12. Strings In Javascript
    ways to declare string are- 
        let myString = "Hello world";                   //using double quotes
        let myString = 'Hello world';                   //usimg single quotes
        let myString = `Hello world`;                   //using template literals
        let myString = new String("hello world");       //using constructor

        console.log(myString.length)                //for check length of an string

    Some main topics we will study in strings are-----
    1. Escape Character
    2. finding A string in a string
    3. searching for a string in a string
    4. Extracting Strings parts
    5. Replacing String Content
    6. Extracting String Characters 
    7. Other Useful Methods 

    1. Escape Character
        let writer = "poem is written by \"mr shk\" ";
        let writer = 'poem is writter by \'Mr. Shaikh\' ';
        let writer = "poem is writter by "Mr. Shaikh" ";
        let writer = "poem is writter by 'Mr. Shaikh' ";
        let writer = `poem is writter by "Mr. Shaikh" `;

    2. finding A string in a string
        if not find anything it returns -1 ;

        console.log(writer.indexOf('e'));           //find from first
        console.log(writer.indexOf('e', 3));
        console.log(writer.lastIndexOf('e'));       //find from last
        console.log(writer.lastIndexOf('e',3))
    
    3. searching for a string in a string
        console.log(writer.search('Mr')); //does not take 2nd argument for position

    4. Extracting Strings parts
        There Are 3 methods for Extracting part of a string. 
            slice(start,end);
            substring(start,end);
            substr(start,length);

            emaple: 
            console.log(writer.slice(20));      //20 s end tk return krega
            console.log(writer.slice(20,25));   // 20 s 25 tk return krega
            console.log(writer.slice(20,-4));   //last k four nhi dega

            console.log(writer.substring(20));
            console.log(writer.substring(20, 25));
            console.log(writer.substring(20, -4));    //cannot accept negative values 

            console.log(writer.substr(0,10));       //0 se 10 tk return krega
            console.log(writer.substr(-10));       //returns last 10 values

    5.  Replacing String Content
        console.log(writer.replace('Shaikh', 'Aarav'));

    6.  Extracting String Characters 
        There Are 3 methods for Extracting string character . 
        1. charAt(position);
            console.log(writer.charAt('11'));
        2. charCodeAt(position);
            console.log(writer.charCodeAt('11'));
        3. property Access[]; 
            console.log(writer[11]);

    7. Other Useful Methods 
        console.log(writer.toUpperCase());
        console.log(writer.toLowerCase());
        console.log(writer.concat('yeee'));
        console.log(writer.trim());     //remove white spaces
        console.log(writer.split(" ")); //converting an string into an array use split as , | - " " etc
 
13. Date And Time in JavaScript
    1. Date Metohd (get and set)
    2. Time Method (get and set)

    JavaScript Has built in method for create date example=>
        let date = new Date();

        let date = new Date();
        console.log(date);
        console.log(date.toLocaleString());
        console.log(date.toString());
        console.log(Date.now()); //return miliseconds since 1 jan 1970
        //new Date(year, month, day, hour, min, second, miliseconds);
        console.log(new Date(2021, 0, 25, 33, 20 ,0, 0));
        console.log(new Date(2021, 0, 25));         //return year month and date
        console.log(new Date(2021, 12));            //return year and month
        console.log(new Date("October 13, 2014 11:13:00"));
        console.log(new Date(100000000000));      //return only miliseconds

    1. Date Method (get and set)
        //Js Date Get Methods 
            console.log(new Date().toLocaleString());
            console.log(new Date().getFullYear());
            console.log(new Date().getMonth());
            console.log(new Date().getDate());
            console.log(new Date().getHours());
            console.log(new Date().getMinutes());
            console.log(new Date().getSeconds());
            console.log(new Date().getMilliseconds());
            console.log(new Date().getDay());
            console.log(Date.now());

        //Js Date Set Methods
            console.log(new Date().setDate(15));
            console.log(new Date().setFullYear(2026));
            console.log(new Date().setFullYear(2026, 10, 5));
            console.log(new Date().setMonth(12));        

    2. Time Method (get and set)
        //Js Time Get Methods 
            console.log(new Date().getTime());
            console.log(new Date().getHours());
            console.log(new Date().getMinutes());
            console.log(new Date().getSeconds());
            console.log(new Date().getMilliseconds());

        //Js Time Set Methods
            console.log(new Date().setTime());
            console.log(new Date().setHours(5));
            console.log(new Date().setMinutes(5));
            console.log(new Date().setSeconds(5));
            console.log(new Date().setMilliseconds(5));

14. Math object In JavaScript
    console.log(Math.PI);                       //returns pi Value
    console.log(Math.round(25.780));            //return rounded value 26 bcoz .7 
    console.log(Math.round(25.4));              //return rounded value 25 bcoz .4 
    console.log(Math.pow(3, 3));                //power 3 * 3 * 3
    console.log(Math.sqrt(25));                 //Square Root
    console.log(Math.abs(-20));                 // return positive value
    console.log(Math.ceil(25.480));             // always rounds a number up to the next largest integer.
    console.log(Math.floor(25.600));            //rounds a number DOWNWARDS to the nearest integer.
    console.log(Math.random());                 //generate ranodm number
    console.log(Math.floor(Math.random() * 10));
    console.log(Math.min(0,120,150,-87,09,-5)); //return smallest
    console.log(Math.max(0,120,150,-87,09,-5)); //return largest one
    console.log(Math.trunc(4.9));               /returns integer part of number by removing fractional digits.
    console.log(Math.trunc(-4.9));              //same as math.floor if negative equal to math.ceil

15. DOM (document object model), BOM (browser object model) and Window Object in JavaScript


---------------------------------------------------End--------------------------------------------------------------