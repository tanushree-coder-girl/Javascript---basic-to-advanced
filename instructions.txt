-------------Javascript and ES6 From Beginer To Advanced----------

1. Introduction 
    Javascript is the most demanded programming language for the web. It improves the user experience of web pages by converting it from a static page into interactive one.
    Javascript adds behaviour to web pages.

2. Ways to write
    Internal => before body tag start script tag and write js in it for example
    <script>
        console.log('hello world')
    </script>

    External => create separate file for example index.js and add a script tag link before body end tag 
                <script src="index.js"></script>

3. JavaScript Comments
    //I am single line comment in javascript 

    /*
    i am multiline comments
    in 
    javascript
    */

4. Printing In Console
    console.log('Hello Welcome in Javascript course')

5. Values And Variables in Javascript
    There are 3 ways to declare a JavaScript variable:
    var
    let                                                 // It Coments in ES6 Part
    const                                               // It comes In ES6 Part

    syntax :
    var variable_name = value;
    var name = "my name is tanu";
    let name = "tanu";
    const name = "tanu"

    difference between var , let and const ----
        var can Redeclared. it overwrites previous value with new value
        let and const cannot be Redeclared. 
        for example
            var myAge = 18;
            var myAge = 25;
            console.log(myAge);   // it gives output 25 bcoz it overwrite var variable with new one.
            let myAge2 = 12;
            let myAge2 = 20;
            console.log(myAge2);  //it gives an error bcoz myAge2 already been declared.

            let and const variable provide Block Scope in JavaScript.
            Variables declared inside a { } block cannot be accessed from outside the block:

            for Example=>
                function checkVariables() {
                    let checkMe = "I am Outside";
                    {
                    let checkMe = "I am Inside"
                    console.log(checkMe); 
                    }
                    console.log(checkMe);
                }
                checkVariables();     //output is I am Inside  I am Outside

            Variables declared with the var keyword can NOT have block scope it Has Function Scope.
            Variables declared inside a { } block can be accessed from outside the block.

            for Example=>
                function checkVariables() {
                    var checkMe = "I am Outside";
                    {
                    var checkMe = "I am Inside"
                    console.log(checkMe); 
                    }
                    console.log(checkMe);
                }
                checkVariables();   //output is I am Inside  I am inside

            const is a constant variable so we can declare const variable only once we cannot change value later. 
            for example
            const PI = 3.147;
            PI = 5; // gives error bcoz we cannot change const variable value.

    some common rules for declaring Variables are:
        1: Naming Conventions must be in camelCase. 
            example=> var userName = "nk sharma";

        2: Names are case sensitive 
            example Name name both are different varialbles.
        
        3. Cannot use Reserved words which already taken by javascript
            example var var = "cannot use var as variable name bcoz is javascript reserved keyword "

        4. Names must begin with a letter, underscore, dollar sign, 

        5.Names cannot not begin with number

        You can declare many variables in one statement.
        Start the statement with var and separate the variables by comma:
            example= var name="RK", surname="sharma", age="20";

6. Data Types in Javascrpit
    Six Data Types that Are primitives
    
    1. Undefined
        Undefined data types means declare a variable but no value. we can put value letter when we need.
        var x;
    2. String
        var name = "my name is ---";
    3. Number
        var age = 20;
    4. Booleans
        var is_available = true;    var is_available = false;
    5. NULL
        var nullvariable = null;
    6. Bigint  //It comes in Ecmascript 2020 
            const num = 9007199254742091n;
            console.log(typeof(num))        //bigInt
    7. Symbol
    8. nan
        nan or not a number is a property of global object in other words it is a varialbe in global scope. The initial Value of Nan is not a number. 

    for check data type of a varialbe use typeof(varialbeName);
    Note : object and arrays are also called data types
    Important Note: We will discuss about array and objects later in array and object portion on line no: array in 325 line number and object in 859 line number

7. Expressions And operator
    10 + 5 = > This is Called An Expression
    + is called Operator 
    10 and 5 is called Opearands

    Types Of Operators: 

    1: Assignment Operator
        assign opearor used to assign value assignment operator is = 
        for example a = 20; //in this = assign value so = is called assignment operator

    2: Arithmetic Operator
        arithmetic operator means mathematical operations for example +, -, *, / etc
        5 + 5;      // Addition Operator ( + )
        5 - 5;      // Substraction Operator ( - )
        5 * 5;      // multiplication Operator ( * )
        5 / 5;      // Divison Operator ( / )
        5 % 4;      // Module Operator ( % )
        5 ** 5      // Exponential Operator or power ( ** )   //It comes in ES6
        a = ++a     // prefix increament
        a = a++     //postfix increament
        a = --a     // prefix decreament
        a = a--     //postfix decreament

    3: Comparision Operator
        5 == "5"      //Equal to operator check only values ( == )
        5 === 5       //triple Equal to operator check values with data types ( === )
        5 != 4        //Not Equal to Operator ( != )
        10 > 5        //Greater THan operator ( > )
        10 < 5        //Less THan operator ( < )
        10 >= 5        //Greater THan or equal to operator ( >= )
        10 <= 5        //Less THan or equal to operator ( =< )

    4. Logical Operator
        if(a>b && b<c)  //and operator ( && ) if both values true
        if(a>b || b<c)  //or operator ( || ) if one values true then it return true
        if(!a=b)        // logical not ( ! )

    5. String Operator
        "Hello," + "I am TAnu";               //for concation two string use concat operator ( + )

        Template Literals                       //It comes in ES6 part
            template literal is used to use both variable with string for Example
            var name = "tanu";
            syntax : `  writter inside back quote and variable in hash with curly braces #{ variableNameHere } `;
            console.log(` My Name is ${name} `);

    6. Conditional (Ternary) Operator
        ternary operator means one liner if else 
        condition ? true : false ;
        5 == 5 ? true : false ;

8. Control Statements And Loops
    if else
        if( true ){
            console.log('this is true block');
        }else{
            console.log('this is false block')
        }
    
    if elseif else
        if( a > b ){
            console.log('a is greater');
        }else if(a < b ){
            console.log('b is greater')
        }else{
            console.log('else block')
        }

    note : fasly values in js => 0, ' ', undefined, null, nan falsy values always show else block. 
    if (0){
        console.log('i am not executed in falsy value');
    }else{
        console.log('i am always executed with falsy value');
    }

    //Switch Case Statement
        var a = 1;
        switch(condition){
            case 1:console.log('one');
            break;
            case 2:console.log('two');
            break;
            case 3:console.log('three');
            break;
            default: console.log('another number');
        }
    
    //While loop
        var num = 0;
        while(num < 10){
            console.log(num)
            num ++;
        }

    //do while loop
        var num = 0;
        do {
            console.log(num)
            num ++;
        }
        while(num < 10)

    difference b/w do while and while loop is that do while always run one time then check condition but while loop first check condition then executes code.

    //For loop
        for( i = 0; i < 10; i++){
            console.log(i)
        }

    //conditional (ternary)
    ((5 == 5) ? '5 is equal to 5': '5 is not equal to 5');

    //For in loop
        var dataArray = ["mohan","sohan","ravi"]
        for (let elements in dataArray){
            console.log(elements);          //for in loop return index number of array
        }

    //For of Loop
        var dataArray = ["mohan","sohan","ravi"]
        for (let elements of dataArray){
            console.log(elements);          //for of loop return elements values of an array
        }
    //Foreach loop
        var dataArray = ["mohan","sohan","ravi"]
        dataArray.foreach(function(element, index, array, this){
            console.log('my name is'+element+ 'and i am on index num'+index + 'belong to this array'+array);
        });

9. Debugger in Javascript
    debugger is used to debugging code in console. use debugger in block function to check how its works.
    debugger;
    for example
        for (let i = 0; i <= 10 ; i++) {
            debugger;
            console.log(i);
        }

10. Functions In Javascript

    1. Function define 
        function myFunction(){
            console.log('hy')
        }
    2. Function Calling 
        myFunction();

    3. Function Parameters 
        function myFunction(name, age){
            console.log('my name is' + name + ' my age is ' + age)
        }
    4. Function Arguements 
         myFunction('Ak', 20);

    5. Function Expressions
        var functionExpression = myFunction();

    6. Return Keyword
        function myFunction(name, age){
           let msg = 'my name is ' + name + ' my age is ' + age ;
           return msg;
        }
        var functionExpression = myFunction();
        console.log(functionExpression);

    7. Anonymous Functions 
        var AnonymousFunction = function(){
            return 5 + 5;
        }
        var AnFunc = AnonymousFunction();
        console.log(AnFunc)

    8. Arror Functions or Fat Arrow Functions   // It Coments in ES6 Part
        let myArrowFunction = () => {
            console.log('I am syntax of arrow function')
        }
        myArrowFunction();

        //if only return single line statment then no need to use return keyword for example 
        let myName = () => 'hello world';
        console.log(myName());

    9. Default Arguements In Function               //It comes in ES6 part 
        function defaultArugumentFunction (a , b = 5){
            console.log(a + b)
        }
        defaultArugumentFunction( 4 );

    10. Rest parameters In Functions            //it comes in es6 part 
        The rest parameter syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent variadic functions in JavaScript.

            function hello(...allArguments){
                console.log(allArguments);
            }
            hello ('hello', 'world', 'welcome')


11. Arrays In Javascript
    var myArray = ["apple", "ball", "cat", 10];
    rules: array always start counting from 0 index number.
        2. first element of array is called lower index or lower boundaries and last element of array is called upper index or upper boundaries.
        
    Some main topics we will study in array are-----
    1. Traversal of an array 
    2. Searching and filter in Array 
    3. How to sort and compare and array 
    4. How to insert /add /replace/ delete in array (CRUD)
    5. Map(), reduce(), Filter() method in brief.
    6. Array Destructing                        //It comes in ES6 Part
    7. Spread Operators                         //It comes in ES6 Part
    8. new Set Only Find Unique Values in Array 

    Ways to declare Array are- 
        var fruits = new Array;    //optional not compulsory to write this
        var fruits = ['mango', 'apple', 'orange'];

    for check length of an array : use 
        console.log(arrayName.length);

    1: Traversal Of An Array
        arrayName[index];
        arrayName[0];  //for knowing 1st element of an array
        arrayName[arrayName.length - 1];  //for knowing last element of an array

        for fetch all data in an array using for loops------

            arrayName.forEach(function(element, index ,arr){
                console.log(element)                // best way to fetch an array is foreach loop
            })

            arrayName.forEach((element, index ,arr) => {
                console.log(element)        //return element value , element index number , belongs to array
            })

            for( i = 0; i < arrayName.length; i++){
                    const element = arrayName[i];       //return only element value
            }

            for (elementId in arrayName){
                console.log(elementId)   //return only index nmuber
            }

             for (element of arrayName){
                console.log(element)   //return only element value
            }

    2: Searching And Filtering Of An Array
        var student = ["rahul","rohit","abhav","ankit","afrin","abhav"];

        indexOf method syntax--
            indexOf('what to find', from where start finding);

        console.log(student.indexOf());  //if not match with anything it return -1 
        console.log(student.indexOf('abhav'));   //if gives index number //2 
        console.log(student.indexOf('abhav', 3)); //if start finding from 3 index number and return 5

        lastIndexOf method syntax--
            lastIndexOf('what to find', start finding from last element);

        console.log(student.lastIndexOf("abhav"));   //start finding from last element return 5 
        console.log(student.lastIndexOf("abhav", 2));  //return 3
        if not find anything return -1 
        
        //Includes method                        //It comes in ES6 Part
            if check is present or not return true or false
        console.log(student.includes('rahul'));
        console.log(student.includes('rahul',3));

        //Find Method and findIndex method 

        //find method return only one matching element if not find anuthing then ot return undefined
            let myArray = [1,2,3,4,5,6,7,8,9,10]
            console.log(myArray.find((element)=>{
                return element < 5;
            }));

        //findIndex method return only one matching element id if not find anuthing then ot return -1
            let myArray = [1,2,3,4,5,6,7,8,9,10]
            console.log(myArray.find((elementId)=>{
                return elementId < 5;
            }));

        //Filter Method 
            //Filter Method Returns all matching element in an new array if not find any matching results then it returns empty array
             
                let numGreaterThanFiveFilterData = myArray.filter((element, index, arr)=>{
                   return element > 5;
                });
                console.log(numGreaterThanFiveFilterData);
            
    3. How to sort and compare and array 
        //converting in string and compare return in ascending order.
        myArray.sort(); 
        for example => let num = [1,2,3,40,20];
        it gives output console.log(num.sort()); // [1,2,20,3,40]

    4. How to insert /add /replace/ delete in array (CRUD)

        Add Data in last 
            let myArray = ['apple','banana',]
            myArray.push('mango');
            myArray.push('orange', 'guava');        //also add multiples values
        Add Data in Start 
            myArray.unshift('lichi');

        Remove last element of array
            myArray.pop();
        remove first element of array
            myArray.shift();
        
        Splice Metohd 
            myArray.splice(add index, delete index, add element);
            for example myArray.splice(3, 0, 'grapes');  //it add grapes on index 3
            myArray.splice(myArray.length , 0, 'grapes');       /it adds an element in last 
            myArray.splice(1, 1,'papapya')  //it replace 1 index from papaya
            myArray.splice(2, 2); //remove 2 elements from 2 index

        Slice method 
            slice method returns selected elements in an array, as a new array. does not change the original array. 
            syntax 
            myArray.slice(starting index, ending index);
            myArray.slice(1,3);
            myArray.slice(2, Infinity)

    5. Map(), reduce(), Filter() method in brief.

        Map Method
        map method is used to fetch all data of an array it is similar as foreach but the major difference between foreach and map method is that- 
        map : it returns new array without mutating the original array . 
                map method also use chaining other methods . 
        forEach : it mutating the original array 

        example of map method 
            array.map((element , index, array)=>{
                return element;
            });

        Filter Method is used to filter data 
            array.filter((element , index, array)=>{
                return element.category == "horror";
            });

        reduce Method 
            The reduce Method executes a reducer function (that you provide) on each element of the array resulting in single output value. the reduces function takes 4 Arguements . 
            accumulator , current Value , Index , array 

            array.reduce((accumulator, currentValue, index, array)=>{
                return accumulator += currentValue;
            });

            //also pas initial value
                let sumofAllNum = array.reduce((accumulator, currentValue, index, array)=>{
                    return accumulator += currentValue;
                },10);
                console.log(sumofAllNum);

            reduce Method is used to Flattern an array means to convert the 2d , 3d array in to a single dimensional array. 
            example => 
                let arr = [
                    ['one','two'],
                    ['three','four'],
                    ['five','six']
                ];
                flatArray = arr.reduce((accumulator, currentValue)=>{
                    return accumulator.concat(currentValue);
                });
                console.log(flatArray);

        Map Method chaining System example 
        let allNumbers = [1,2,3,4,5,6,7,8,9,10,20,30,40,50];
        let methodChaining = allNumbers.map((elem)=>elem * 2).filter((element)=>element > 50).reduce(       (accumulator, currElem)=>accumulator += currElem);
        console.log(methodChaining);

        in the above example first we multiply all element by 2 then we find only those element which iss greater than 50 then we add all filter data using reduce method .

    6. Array Destructing
        it comes in es6 part to destruct an array 
        syntax: let myArray = ['mango','apple','orange'];
                let [fruit1, fruit2, fruit3] = myArray;
                console.log(`${fruit1} ${fruit2} ${fruit2}`);
        
    7. Spread Operator 
        JavaScript ES6 (ECMAScript 6) introduced the spread operator. The syntax is three dots(...) followed by the array (or iterable*). It expands the array into individual elements. So, it can be used to expand the array in a places where zero or more elements are expected.
        for example 
            let num = [1,2,3,4,5];
            let moreNum = [...num, 6,7,8,9,10]

    8. new Set
        Returns Only Unique Value if Duplicate then gives only one .

        let firstSet = [1,1,3,4,5,2,3];
        let newSetOfArray = new Set(firstSet);
        console.log(newSetOfArray);
        output is {1, 3, 4, 5, 2}

12. Strings In Javascript
    ways to declare string are- 
        let myString = "Hello world";                   //using double quotes
        let myString = 'Hello world';                   //usimg single quotes
        let myString = `Hello world`;                   //using template literals
        let myString = new String("hello world");       //using constructor

        console.log(myString.length)                //for check length of an string

    Some main topics we will study in strings are-----
    1. Escape Character
    2. finding A string in a string
    3. searching for a string in a string
    4. Extracting Strings parts
    5. Replacing String Content
    6. Extracting String Characters 
    7. Other Useful Methods 

    1. Escape Character
        let writer = "poem is written by \"mr shk\" ";
        let writer = 'poem is writter by \'Mr. Shaikh\' ';
        let writer = "poem is writter by "Mr. Shaikh" ";
        let writer = "poem is writter by 'Mr. Shaikh' ";
        let writer = `poem is writter by "Mr. Shaikh" `;

    2. finding A string in a string
        if not find anything it returns -1 ;

        console.log(writer.indexOf('e'));           //find from first
        console.log(writer.indexOf('e', 3));
        console.log(writer.lastIndexOf('e'));       //find from last
        console.log(writer.lastIndexOf('e',3))
    
    3. searching for a string in a string
        console.log(writer.search('Mr')); //does not take 2nd argument for position

    4. Extracting Strings parts
        There Are 3 methods for Extracting part of a string. 
            slice(start,end);
            substring(start,end);
            substr(start,length);

            emaple: 
            console.log(writer.slice(20));      //20 s end tk return krega
            console.log(writer.slice(20,25));   // 20 s 25 tk return krega
            console.log(writer.slice(20,-4));   //last k four nhi dega

            console.log(writer.substring(20));
            console.log(writer.substring(20, 25));
            console.log(writer.substring(20, -4));    //cannot accept negative values 

            console.log(writer.substr(0,10));       //0 se 10 tk return krega
            console.log(writer.substr(-10));       //returns last 10 values

    5.  Replacing String Content
        console.log(writer.replace('Shaikh', 'Aarav'));

    6.  Extracting String Characters 
        There Are 3 methods for Extracting string character . 
        1. charAt(position);
            console.log(writer.charAt('11'));
        2. charCodeAt(position);
            console.log(writer.charCodeAt('11'));
        3. property Access[]; 
            console.log(writer[11]);

    7. Other Useful Methods 
        console.log(writer.toUpperCase());
        console.log(writer.toLowerCase());
        console.log(writer.concat('yeee'));
        console.log(writer.trim());     //remove white spaces
        console.log(writer.split(" ")); //converting an string into an array use split as , | - " " etc
 
13. Date And Time in JavaScript
    1. Date Metohd (get and set)
    2. Time Method (get and set)

    JavaScript Has built in method for create date example=>
        let date = new Date();

        let date = new Date();
        console.log(date);
        console.log(date.toLocaleString());
        console.log(date.toString());
        console.log(Date.now()); //return miliseconds since 1 jan 1970
        //new Date(year, month, day, hour, min, second, miliseconds);
        console.log(new Date(2021, 0, 25, 33, 20 ,0, 0));
        console.log(new Date(2021, 0, 25));         //return year month and date
        console.log(new Date(2021, 12));            //return year and month
        console.log(new Date("October 13, 2014 11:13:00"));
        console.log(new Date(100000000000));      //return only miliseconds

    1. Date Method (get and set)
        //Js Date Get Methods 
            console.log(new Date().toLocaleString());
            console.log(new Date().getFullYear());
            console.log(new Date().getMonth());
            console.log(new Date().getDate());
            console.log(new Date().getHours());
            console.log(new Date().getMinutes());
            console.log(new Date().getSeconds());
            console.log(new Date().getMilliseconds());
            console.log(new Date().getDay());
            console.log(Date.now());

        //Js Date Set Methods
            console.log(new Date().setDate(15));
            console.log(new Date().setFullYear(2026));
            console.log(new Date().setFullYear(2026, 10, 5));
            console.log(new Date().setMonth(12));        

    2. Time Method (get and set)
        //Js Time Get Methods 
            console.log(new Date().getTime());
            console.log(new Date().getHours());
            console.log(new Date().getMinutes());
            console.log(new Date().getSeconds());
            console.log(new Date().getMilliseconds());

        //Js Time Set Methods
            console.log(new Date().setTime());
            console.log(new Date().setHours(5));
            console.log(new Date().setMinutes(5));
            console.log(new Date().setSeconds(5));
            console.log(new Date().setMilliseconds(5));

14. Math object In JavaScript
    console.log(Math.PI);                       //returns pi Value
    console.log(Math.round(25.780));            //return rounded value 26 bcoz .7 
    console.log(Math.round(25.4));              //return rounded value 25 bcoz .4 
    console.log(Math.pow(3, 3));                //power 3 * 3 * 3
    console.log(Math.sqrt(25));                 //Square Root
    console.log(Math.abs(-20));                 // return positive value
    console.log(Math.ceil(25.480));             // always rounds a number up to the next largest integer.
    console.log(Math.floor(25.600));            //rounds a number DOWNWARDS to the nearest integer.
    console.log(Math.random());                 //generate ranodm number
    console.log(Math.floor(Math.random() * 10));
    console.log(Math.min(0,120,150,-87,09,-5)); //return smallest
    console.log(Math.max(0,120,150,-87,09,-5)); //return largest one
    console.log(Math.trunc(4.9));               /returns integer part of number by removing fractional digits.
    console.log(Math.trunc(-4.9));              //same as math.floor if negative equal to math.ceil

15. DOM (document object model), BOM (browser object model) and Window Object in JavaScript
    1. Window Vs document 
    2. DOM Vs BOM
    3. window-bom : localstorage and session storage, alert , confirm , prompt etc
    4.  DOMNavigation 
    5. Searching And Getting Elements References 

    1. Window Vs document 
        Window => 1. window is the main container or we can say that global Object and any operation related to entire browser window can be a part of window object .
                    2. All The members like object , methods , properties .If they are part of window object then we do not refer the window object.
                    3. windows has methods or properties and object example: setTimeout() and setInterval(), innerHeight or innerWidth etc. are the method, where as document is the object of the window and it also have a screen object with properties describing the physical display.

        Document => 1. whereas document is the child of window object.
                    2. where in the dom we need to refer the document, if we want to use the document object method or properties.
                    3. Document is just the object of the global object which is window object which deals with the document , the html elements themselves. 

        Window Is A global Object 
        Window Has Three Objects 
        1. DOM 
            Dom Contains : Document, Html, body , head , a, h1, etc elements;
        2. BOM 
            BOM Contains : Navigator , screen , location , frames, history, XML http request
        3. JavaScript
            JavaScript Contains : Object , Array, Functions and js.

    2. DOM VS BOM 
        DOM => The dom is the document object model , the html element themselves , eg. document and all Traversal you would do in it events etc. 
        for example => change the background color of body 
            document.body.style.background = "black";

        BOM => The BOM is the browser Object Model , which deals with browser components aside from the document like history, location, localstorage, Navigator, screen as well as some others that vary by browser or in simple meaning all the windows operations which comes under BOm are Performed using BOM . 
        for example =>  for go back 
            window.history.back();

    3. window-bom : localstorage and session storage, alert , confirm , prompt etc
        localstorage And sessionStorage

        sessionStorage is similar to localStorage ; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends. Whenever a document is loaded in a particular tab in the browser, a unique page session gets created and assigned to that particular tab.

        localStorage.setItem('key', 'value');           //for set item
        localStorage.getItem('key');                    //for get item
        localStorage.removeItem('key');                 f//or remove item

        sessionStorage.setItem('key', 'value');         //for set item
        sessionStorage.getItem('key');                  //for get item
        sessionStorage.removeItem('key');               //for remove item

        alert('Hello i am pop up box');
        confirm('Are you ready?');
        prompt('How you feel today');

        console.log(innerWidth);
        console.log(innerHeight);
        console.log(location);
        console.log(location.href);
        location.href = 'https://www.facebook.com';
        console.log(history);
        window.history.back();

    4. DOM Navigation 
        1. document 
        2. document.documentElement
        3. document.head
        4. document.body 
        5. document.body.childNodes         //it includes spaces also as text
        6. document.body.children           //not includes spaces
        7. document.body.children.length
        8. document.body.hasChildNodes
        9. document.body.firstChild
        10.document.body.firstElementChild
        11. document.body.firstElementChild.firstElementChild.style.color = "red"
        12. document.body.parentNode
        13. document.body.parentElement
        14. document.head.parentElement
        15. document.body.previousSibling
        16. document.body.previousElementSibling
        17. document.head.nextSibling
        18. document.head.nextElementSibling

    5. Searching And Getting Elements References 
        1) By id 
            document.getElementById('id');
            By tsking References 
            let paragraph = document.getElementById('id');

        2)By Class 
            document.getElementsByClassName('class');
        
        3)By TagName
            document.getElementsByTagName('h1');
        
        4)By Name 
            document.getElementsByName('name');
        
        5)using QuerySelector 
            document.querySelector('h1');
            document.querySelector('.heading');
            document.querySelector('#para');
        
        6) using querySelectorAll 
            document.querySelectorAll('.allButtons');

    6). Inserting Adjacent Elements or Text or html 
        Mainly THree methods here => 
        1) insertAdjacentHTML(position, html tag);
        2) insertAdjacentText(position, 'text');
        3) insertAdjacentElement(position, element);

            syntax
            targetElement.insertAdjacentElement(position, element);
            Legal position values are:
            1) "afterbegin"
            2) "afterend"
            3) "beforebegin"
            4) "beforeend"

            let container = document.querySelector('.container');

            //The insertAdjacentHTML() method inserts a text as HTML, into a specified position.
            container.insertAdjacentHTML( 'beforebegin' , '<h1>Hello wolrd</h1>')

            //The insertAdjacentText() method inserts a the specified element into a specified position.
            container.insertAdjacentText( 'beforeend' , 'Hello i am text');


            //The insertAdjacentElement() method inserts a the specified element into a specified position.
            let p = document.querySelector('.pp');
            container.insertAdjacentElement("afterend", p);

16. Events In JavaScript 
    Html Events Are Things that happen to html elements. when javascript is used in html pages. JavaScript can react on these events.

    1. 4 Ways of writing Events in JavaScript
    2. What is Event Object
    3. Mouse Event in JavaScript 
    4. Keyboard Event in JavaScript
    5. Input Event In javascript

        1. 4 ways of writing Events in JavaScript
            1. Using Alert ();                  //Inline Event 
            example => <button onclick="alert('hello world')">Click Me</button>

            2. By Calling A Function            //is Most Common way 
            example => <button onclick="myFunction();">Click Me</button>
                        function myFunction(){                          //using normal function
                            alert('hello world')
                        }

                        const myFunction = () => {                       //using Arrow Function
                            alert('hello world');
                        }

            3. Using Inline Events on Element.onclick 
            example => <button id="myBtn">Click me</button>
                        const btn = document.getElementById('myBtn');
                        btn.onclick = function (){
                            alert('Helllo World')
                        }

            4. Using Event Listeners            //Add Event Listener 
            example =>  <button id="myBtn">Click me</button>
                        const btn = document.getElementById('myBtn');
                        btn.addEventListener('click', function(){
                            alert('Hello world');                       //using normal function
                        });

                        btn.addEventListener('click', () => {           //using Arrow Function
                            alert('Hello world');       
                        });

            difference between onclick and addEventListener is that when you call 2nd time same function then add event Listener executes both function but onclick overwrite previous one and call last one only. so addEventListener Listener is best for use.

        2. What is Event Object
            Events that occurs when the mouse interact with the html document belongd to the mouse event object example => mouse event , focus event, keyboard event etc. 
            for eg = > 
                let myFunction = () => {
                    console.log(event);
                    console.log(event.target);
                    console.log(event.type)
                }
                document.querySelector('.myClass').addEventListener('click', myFunction());
            
        3. Mouse Event in JavaScript 
            <h1 onmouseenter="mouseEnter();">Mouse Enter</h1>
            <h1 onmouseleave="mouseLeave();"> Mouse leave </h1>
            <h1 onmouseup="mouseUp();"> Mouse Up </h1>
            <h1 onmousedown="mouseDown();"> Mouse Down </h1>

        4. Keyboard Event in JavaScript
            <h1 onkeyup="myFun();"> Key is up </h1>
            <h1 onkeydown="myFun();"> Key is down </h1>
            <h1 onkeypress="myFun();"> Key is pressed </h1>

        5. Input Event In javascript
            onchange();
            <input type="text" onchange="eventHandler();">      

17. Timing Based Events In JavaScript
    1. setTimeout();
    2. setInterval();
    3. clearTimeout();
    4. clearInterval();

    difference between setTimeout and setInterval is: 
        setTimeout(function, miliseconds);
        it executes a function a waiting a specifiedno of miliseconds. 

        setInterval(function, miliseconds);
        it repeats the execution of the function continuously. 

        let ref = setTimeout(()=>{
            alert('i am show after 5 seconds')
        }, 5000)
        clearTimeout(ref);      //to stop setTimeout function

        let setIntervalFun = setInterval(()=>{
            alert(new Date());
            alert('i am run in every one second')
        },1000);
        clearInterval(setIntervalFun);      //to stop setInterval function

18. OOPS In JavaScript
    1. What is object Literals 
    2. What is "this" object
    3. Object Destructing 
    4. Object properties
    5. Spread Operators
    6. Class and inheritence

    1. Object literal => is simply key : values pair data structure. Storing Variables and methods functions stored in one container. 

    example=> 
        let bioData = {
            name: 'tanu',
            age : 21,
            getData : function (){
                console.log(`my name is ${this.name} nd age is ${this.age}`);
            }
        } 
        bioData.getData();

        note => After Es6 methods in object like this 
           let bioData = {
                name: 'tanu',
                getData(){                
                    console.log(`my name is ${this.name}`);
                }
            } 
            bioData.name;
            bioData.getData();

        Nested Objects => 
            let bioData = {
                fullName : {
                    firstname:'tanu',
                    lastname : 'yadav'
                },
                age : 21
            }
            bioData.fullName.firstname;
            bioData.fullName.lastname;

    2. What is This object
        The defination of this object is that it contains the current context. the this object has different values depends on where it is placed.

        console.log(this);          //it returns window object 

        function testingThisObj (){
            return this;      //it returns window object
        }

        let thisObjTestinginObj = {
            myAge : 100,
            getAll (){
                console.log(this);    //it return current object which is thisObjTestinginObj
            }
        }

        let thisObjTestinginObj = {
            myAge : 100,
            getAll: function (){
                console.log(this);    //it also return current object which is thisObjTestinginObj
            }
        }

        let thisObjTestinginObj2 = {
            myAge2 : 100,
            getAll2:  () => {
                console.log(this);    //it return window object bcoz of arrow function 
            }
        }

        note => the this object will not work with arrow functions. if using arrow function it always return window object.


    3. Object Destructing               //It Comes in ES6 Part  
        object Destructing                  
        let data = {
            name:'tanu',
            age : 20
        }
        let {name , age} = data;
        console.log(name + age)

    4. Object properties
        Object properties 
            let myName = 'name';
            let data = {[myName]: 'tanu'}
            output is {name : 'tanu'}
                    
            let cricketor = 'virat kohli';
            let tenis = 'sania mirza';
            let players = {cricketor,tenis}
            console.log(players);
            output is {cricketor : 'virat kohli', tenis : 'sania mirza'}
    
    5. Spread Operators 
        let abcd = {name: 'tanu'} 
        let bcde = {...abcd, age:20}
        console.log(bcde);          output is : {name : 'tanu', age : 20}

    6. Classes and inheritence
        ECMAScript 2015, also known as ES6, introduced JavaScript Classes.
        JavaScript Classes are templates for JavaScript Objects.
        Use the keyword class to create a class.
        Always add a method named constructor():

        for example => 
        class myClassName {
            constructor (){
               
            }
        }

        //create an object of class 
        let myClassObj = new myClassName();

        Note => For constructor 
            The constructor method is a special method:
            It has to have the exact name "constructor"
            It is executed automatically when a new object is created
            It is used to initialize object properties

            Class Methods
            Class methods are created with the same syntax as object methods.

            example => 
            class data {
                constructor (name) {
                    this.name = name;
                }

                myMethod (){
                    console.log("Hello i am a method in ${this.name}");
                }
            }
            const dataObj = new data('class in js');
            dataObj.myMethod();

            //inheritance 
                class A {
                    constructor (iAm) {
                        console.log(`I am ${iAm} Constructor`);
                    }
                    aMethod (what) {
                        console.log(`A for ${what}`)
                    }
                }

                class B extends A{
                    constructor(iAm){
                        super('Parents');
                        console.log(`I am ${iAm} Constructor`);
                    }
                    bMethod (what) {
                        console.log(`B for ${what}`)
                    }
                }

                const multipleClasses = new B('child');
                multipleClasses.aMethod('Apple');
                multipleClasses.bMethod('Boy');

            //Must Call super() method in child constructor 

19. ECMAScript (Modern Javascript) ES6 (Ecmascript - 2015) to ES11 (Ecmascript - 2020)
        ES5 (Ecmascript 2009) 
            Most Important Feature comes in this update is use strict
            use strict is a feature which is used to write code in strict mode.
            It must Be write at the top of the js file like this "use strict";
            
            "use strict";
        
        ES6 (Ecmascript 2015)
            In this year most Important Features comes.
            1) let and const variable 
            2) Template strings
            3) Default Arguements 
            4) Destructing 
            5) object properties 
            6) Arrow Functions 
            7) Spread Operators
            8) Rest Parameters 

                1) let,const => let name = "tanu" const pi = 3.147;

                2) template string => console.log(`My name is ${name}`);

                3) default arguments => 
                    let add = (a = 10, b) => {
                        console.log(a + b)
                    }
                    add(4)

                4) Destructing - Array and object Destructing
                    Array Destructing
                        let numbers = ['tanu', '20', 'BBA'];
                        let [name, age, qualification, surname="ahir"] = numbers;
                        console.log(name + surname + age + qualification);
                    object Destructing 
                        let data = {
                            name : 'tanu',
                            age : 20,
                            qualification : 'bba'
                        }
                        let {name, age, qualification} = data;
                        console.log(name + age + qualification);

                5) Object properties 
                    let myName = 'name';
                    let data = {[myName]: 'tanu'}
                        output is {name : 'tanu'}
                    
                    let cricketor = 'virat kohli';
                    let tenis = 'sania mirza';
                    let players = {cricketor,tenis}
                    console.log(players);
                
                6) Arrow Functions 
                    let func = () => {
                        return "welcome from arrow function";
                    }
                
                7) Spread Operators 
                    //Used To join 1 array or object in second one 

                    let a = {name: 'tanu'} 
                    let b = {...a, age:20}

                    let a = [mango, apple];
                    let b =[...a, orange];

                8) Rest Parameters In Functions 
                    function hello(...allArguments){
                        console.log(allArguments);
                    }
                    hello ('hello', 'world', 'welcome')


        ES7 (Ecmascript 2016)
            In this year 2 Important features comes. 
            1) Exponential Operator 
                power for example => (5 ** 5); output is 3125
            2) Includes
                myArray.includes('mango'); //return true and false check is present or not

        ES8 (Ecmascript 2017)
            1) padStart();
            2) padEnd();
            3) object.entries();
            4) object.values();

            padStart and padEnd
                let messagee = 'Hello i am a string';
                messagee.padStart(10);          //for padding in start
                messagee.padEnd(10);            //for padding in end

            object.entries and object.values 
                let myObj = {tofee:'melody',icecream:'vanilla'}
                Object.values(myObj);           //return values only
                Object.entries(myObj);          //return both in array form

        ES9 (Ecmascript 2018)
            1) object Destructing 
             let {a,b,c, …object} = myNewObject

        ES10 (Ecmascript 2019)
            1) flat 
            2) Object.fromEntries();            //converting an array into object
            3) object spread operator

            let flatthisArray = [1,[2,3,[4,5],6,7],8]
            console.log(flatthisArray.flat(Infinity));
            console.log(Object.fromEntries(myNewArray));  //it converts an array in object
            let a = {name: 'tanu'} 
            let b = {...a, age:20}     //spread operator

        ES11 (Ecmascript 2020)
            1) Bigint
            const num = 9007199254742091n;
            console.log(typeof(num))        //bigInt

20. Advanced JavaScript
    1) Event Propagation (Event Bubbling, Event Capturing)
    2) Higher Order Function and Call Back Function 
    3) Function Currying 
    4) CallBack Hell 
    5) Ajax call using XML http request 
    6) JSON 
    7) Fetch API 
    8) Promises 
    9) Async - Await 
    10) Error Handling in Js 

        1) Event Propagation 
            This made determines in which order the elements receive the event. 
            Top to Bottom => Capturing phase
            Bottom To Top => Bubbling phase 

            Event Bubbling => The event is first Captured and Handled by the innermost element then propagated to outer most .
                let parentElement = document.querySelector('#parentElement');
                let childElement = document.querySelector('#childElement');

                parentElement.addEventListener('click',()=>{
                    alert('Hello from parent Element');
                });

                childElement.addEventListener('click',()=>{
                    event.stopPropagation();        //if want to stop propagation
                    alert('Hello from Child Element');
                });

                output is when click on parent => Hello from parent element
                when click on Child Element => Hello from Child Element 
                                                Hello from parent Element
                
                Note => If want to stop propagation use 
                        event.stopPropagation();
               
            Event Capturing => The event Is first Captured by the outermost element and propagated to the inner Elements 
                let parentElement = document.querySelector('#parentElement');
                let childElement = document.querySelector('#childElement');

                parentElement.addEventListener('click',()=>{
                    alert('Hello from parent Element');
                },true);                //true is used for event Capturing

                childElement.addEventListener('click',()=>{
                    alert('Hello from Child Element');
                });

                output is when click on parent => Hello from parent element
                when click on Child Element => Hello from parent Element 
                                                Hello from Child Element

            Note : in addEventListener third argument is used for event propagation
                true is used for event Capturing  

            By Default is Event Bubbling Phase 

        2) Higher Order Function and Call Back Function 
            Higher Order Function => Functions which takes another function as an argument is called HOF.

            CallBack Function => Functions which get passed as an argument to another function is called CBF.

            For Example => 
                const add = (a,b) => {                  //CallBack function
                    return a + b;
                }
                const substract = (a,b) => {            //CallBack function
                    return a - b;
                }
                const divide = (a,b) => {               //CallBack function
                    return a / b;
                }
                const multiply = (a,b) => {             //CallBack function
                    return a * b;
                }

                const calculator = (num1, num2, operator) => {          //Higher Order function
                    return operator (num1, num2);
                }
                calculator(5,2,add);
                calculator(5,2,substract);
                calculator(5,2,divide);
                calculator(5,2,multiply);

        In the above Example calculator is Higher order function bcoz it takes another function as an argument. And Add , substract, divide, multiply is CallBack Function bcoz it is passed as an Arguement in another function.

=========================================================================
Before moving ahead let's discuss About some Important topics that is-
    How JavaScript Works And What is Asynchronous javascript (Async js) ? 
    1) Hoisting in JavaScript 
    2) Scope Chain and Lexical Scoping in javascript 
    3) Closures in JavaScript 
    4) what is Asynchronous javascript programming 
    5) What is Event Loop 
    
        1) Hoisting In javascript 
            Creation phase and execution phase. It means all the variable and functions are moved to the top of their scope before the code execution. It will only works before ES6 now it not works with let or const keyword. it only works with var keyword. ecma script or modern javascript does not support Hoisting.

                console.log(iAmAVarVarialbe);
                var iAmAVarVarialbe;

        2) Scope Chain and Lexical scopping in js
            Scope => Scope in JavaScript refers to the accessibility or visibility of variables. That is, which parts of a program have access to the variable or where the variable is visible.

            Lexical scopping => Inner Function Can Access data of parents / outer functions but parent cannot access data of its inner function variables. 

            Example=> 
            let myGlobalVarialble = 'Hello, i am global variable';

                let outerFunction = () => {
                    let outerFunctionVarialbe = 'Hello i am in outer function variable';

                    console.log(myGlobalVarialble);
                    console.log(outerFunctionVarialbe);
                    //console.log(innerFunctionVarialbe);  //cannot acess bcoz i am inside inner function gives errors

                    let innerFunction = () => {
                        let innerFunctionVarialbe = 'Hello i am in inner function variable';

                        console.log(myGlobalVarialble);
                        console.log(outerFunctionVarialbe);
                        console.log(innerFunctionVarialbe);
                    }
                    innerFunction();
                }
                outerFunction();

                console.log(myGlobalVarialble);
                //console.log(outerFunctionVarialbe); //cannot acess bcoz i am inside function gives errors
                //console.log(innerFunctionVarialbe);  //cannot acess bcoz i am inside function gives errors

        3) Closures In JavaScript 
            A Closure is the Combination of a function bundled together (enclosed) with reference to its sorrounding state (the lexical environment).

            In Other Words , a Closure gives you access to an outer function.s scope from an inner functions.
            In js , Closures are created everytime a function is created , at function time. 

            example => 1)
                const outerFun = (a) => {
                    let b = 10; 
                    const innerFun () => {
                        console.log(a + b);
                    }
                    innerFun();
                }
                outerFun(5);

            example => 2)
                const outerFun = (a) => {
                    let b = 10; 
                    const innerFun () => {
                    return a + b;
                    }
                    return innerFun;
                }
                let checkClosure = outerFun(5);
                console.log(checkClosure());
                console.dir(checkClosure);

        4) what is Asynchronous javascript programming 
            Asynchronous JavaScript => Asynchronous code allows the program to be executed immediately wheras
            Synchnchronous code will block further execution of the remaining code until it finishes the current one . 
            Asynchronous works on non-blocking i.o model.

            Example => 
            console.log('Hello everone');
            setTimeout(()=>{
            console.log('i am settimeout function run after 5 seconds but it does not block other code');
            },5000)
            console.log('I am next after st timeout '); 

            in this example set timeout function run after 5 seconds so it executes next line of code it does not block other code
            //The output of this code is 
                Hello everone
                I am next after st timeout 
                i am settimeout function run after 5 seconds but it does not block other code
                                    
        5) What is Event Loop 
            The Event Loop is the Secret by which javascript gives us an illusion of being multithreaded even through its single threaded. 
            Here the Callback Function in the event queue has not run yet and its waiting for its time into the stack when the set timeout is being executed and the web api is making the mentioned wait. 

            Javascript Event Loop 

            Execution Stack               ==========> Web Apis (AJAX/API CALLS) (Settimeout function)
            (global Execution context)                          ||
                                                                ||
                                                                ||
                                                                ||
                                                                ||
                                                <==========  message Queue

            In this diagram 

            All code comes in THe Execution Stack and executed 
            if It Has Settimeout function which must be run after 5 seconds 
            so settimeout is moved from Execution Stack to WEB APIs 
            then after 5 seconds Settimeout is moved in Message Queue 
            Then message queue return settimeout to The Execution Stack
            and finally set timeout is executed. 

=========================================================================

Advanced JavaScript 
        3) Function Currying 
            Currying is a technique of evaluating function with multiple arguments, into sequence of functions with single argument.In other words, when a function, instead of taking all arguments at one time, takes the first one and return a new function that takes the second one and returns a new function which takes the third ...

            for example => 
            sum (3) (5) (8)
            function sum (a) {
                return function (b) {
                    return function (c){
                        console.log( a + b + c);
                    }
                }
            }

            with the help of arrow function for example => 
            let sum = (a) => {
                return (b) => {
                    return (c) => {
                        console.log(a , b, c);
                    }
                }
            }
            sum (3) (5) (8)

            with the help of arrow function also write in one line for example => 
                let sum = (a) => (b) => (c) => console.log(a , b, c);
                sum (3) (5) (8)
            
        4) CallBack Hell 
            It is known as a pyramid of doom , is an antipattern seen in code Asynchronous programming.
            Example Of CallBack Hall is like this-> Lools like a pyramid 

            function call1 (){
                console.log('hello1');
                function call2 (){
                    console.log('hello2');
                    function call3 (){
                        console.log('hello3');
                        function call4 (){
                            console.log('hello4');
                            function call5 (){
                                console.log('hello5');
                                function call6 (){
                                    console.log('hello6');
                                }
                                call6();
                            }
                            call5();
                        }
                        call4();
                    }
                    call3();
                }
                call2();
            }
            call1();

        5) AJAX Call Using XML HTTP request 
            Full form 
            API => Application programming Interface 
            AJAX => Asynchronous Javascript And XML 
            
            //https://restcountries.eu/rest/v2/name/brazil
            an Free api for get countries data

            Calling An api --

            const request = new XMLHttpRequest();
            request.open('GET', 'https://restcountries.eu/rest/v2/name/brazil'); 
            request.send();

            request.addEventListener('load', function(){
                console.log(this.responseText);     //return in json format
                const data = JSON.parse(this.responseText);     //convert in object of js
                console.log(data);
            });

            Note => request.open takes two parameter 1) method like GET or POST & 2) URL of api.

        6) JSON
            here is 2 Important Methods in json. 
            1) JSON.stringify();
                It turns a JavaScript Object Into JSON text and stores that JSON text in a string. 
                example => 

                let jsObj = {title : 'THe Jungle book', author : 'Milky Man', Published_on : 'December'}

                console.log(JSON.stringify(jsObj));
                 //output is 
                 {"title":"THe Jungle book","author":"Milky Man","Published_on":"December"}

            2) JSON.parse(); 
                It turns a String of Json text into a javascript object. 
                example =>

                let json = {"title":"THe Jungle book","author":"Milky Man","Published_on":"December"}
                console.log(JSON.parse(json));

                //output is 
                 {title: 'THe Jungle book', author: 'Milky Man', Published_on: 'December'}

        7) Fetch API 
            





---------------------------------------------------End--------------------------------------------------------------